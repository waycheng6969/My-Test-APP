import kotlin.properties.ReadWriteProperty
import kotlin.reflect.KProperty

open class SmartDevice(val name: String, val category: String) {
    // open class can be extended by subclasses 
    open var deviceStatus = "online"
        protected set   //protected from accidently change/override 

    open val deviceType = "unknown"

    open fun turnOn() {
        deviceStatus = "on"
    }

    open fun turnOff() {
        deviceStatus = "off"
    }
    
    open fun printDeviceInfo() {
        println("Device name: $name, category: $category, type: $deviceType" )
    }
}

class SmartTvDevice(deviceName: String, deviceCategory: String) :
    SmartDevice(name = deviceName, category = deviceCategory) {

    override val deviceType = "Smart TV"

    private var speakerVolume by RangeRegulator(initialValue = 2, 
                                                minValue = 0, maxValue = 100)
      
    private var channelNumber by RangeRegulator(initialValue = 1, minValue = 0, 
                                                maxValue = 200)
    
    fun increaseSpeakerVolume() {
        speakerVolume++
        println("Speaker volume increased to $speakerVolume.")
    }
    
    fun decreaseSpeakerVolume() {
        speakerVolume--
        println("Speaker volume decreased to $speakerVolume.")
    }

    fun nextChannel() {
        channelNumber++
        println("Channel number increased to $channelNumber.")
    }

    fun previousChannel() {
        channelNumber--
        println("Channel number decreased to $channelNumber.")
    }
        
    override fun turnOn() {
        super.turnOn()
        println(
            "$name is turned on. \n => Speaker volume is set to $speakerVolume \n " +
            "=> channel number is set to $channelNumber."
        )
    }

    override fun turnOff() {
        super.turnOff()
        println("$name turned off")
    }
}

class SmartLightDevice(deviceName: String, deviceCategory: String) :
    SmartDevice(name = deviceName, category = deviceCategory) {

    override val deviceType = "Smart Light"

    private var brightnessLevel by RangeRegulator(initialValue = 0, 
                                                  minValue = 0, maxValue = 100)

    fun increaseBrightness() {
        brightnessLevel++
        println("Brightness increased to $brightnessLevel.")
    }
    
    fun decreaseBrightness() {
        brightnessLevel--
        println("Brightness decreased to $brightnessLevel.")
    }

    override fun turnOn() {
        super.turnOn()
        brightnessLevel = 2
        println("$name turned on. \n => The brightness level is $brightnessLevel.")
    }

    override fun turnOff() {
        super.turnOff()
        brightnessLevel = 0
        println("Smart Light turned off")
    }
}

class SmartHome(
    val smartTvDevice: SmartTvDevice,
    val smartLightDevice: SmartLightDevice
) {

    var deviceTurnOnCount = 0
        private set

    fun turnOnTv() {
        deviceTurnOnCount++
        smartTvDevice.turnOn()
    }

    fun turnOffTv() {
        deviceTurnOnCount--
        smartTvDevice.turnOff()
    }

    fun increaseTvVolume() {
        if (smartTvDevice.deviceStatus == "on") {
            smartTvDevice.increaseSpeakerVolume() 
        } else {
            println("SmartHome: Can't adjust volume because TV isn't on.")
        }
    }
    
    fun decreaseTvVolume() {
        if (smartTvDevice.deviceStatus == "on") {
            smartTvDevice.decreaseSpeakerVolume() 
        } else {
            println("SmartHome: Can't adjust volume because TV isn't on.")
        }
    }
    
    fun changeTvChannelToNext() {
        if (smartTvDevice.deviceStatus == "on") {
            smartTvDevice.nextChannel()
        } else {
            println("SmartHome: Can't change channel because TV isn't on.")
        }
    }
    
    fun changeTvChannelToPrevious() {
        if (smartTvDevice.deviceStatus == "on") {
            smartTvDevice.previousChannel()
        } else {
            println("SmartHome: Can't change channel because TV isn't on.")
        }
    }
    fun turnOnLight() {
        deviceTurnOnCount++
        smartLightDevice.turnOn()
    }

    fun turnOffLight() {
        deviceTurnOnCount--
        smartLightDevice.turnOff()
    }

    fun increaseLightBrightness() {
        if (smartLightDevice.deviceStatus == "on") {
            smartLightDevice.increaseBrightness()
        } else {
            println("SmartHome: Can't change brightness because light isn't on.")
        }
    }
    
    fun decreaseLightBrightness() {
        if (smartLightDevice.deviceStatus == "on") {
            smartLightDevice.decreaseBrightness()
        } else {
            println("SmartHome: Can't change brightness because light isn't on.")
        }
    }

    fun turnOnAllDevices() {
        turnOnTv()
        turnOnLight()
    }
        
    fun turnOffAllDevices() {
        turnOffTv()
        turnOffLight()
    }
    
    fun printSmartTvInfo() {
        println("SmartHome TV Info:") 
        smartTvDevice.printDeviceInfo() 
    }
    
    fun printSmartLightInfo() {
        println("SmartHome light Info:") 
        smartLightDevice.printDeviceInfo() 
    }
    
    fun printAllDevicesInfo() {
        printSmartTvInfo()
        printSmartLightInfo() 
    }
}

class RangeRegulator(
    initialValue: Int,
    private val minValue: Int,
    private val maxValue: Int
) : ReadWriteProperty<Any?, Int> {

    var fieldData = initialValue

    override fun getValue(thisRef: Any?, property: KProperty<*>): Int {
        return fieldData
    }

    override fun setValue(thisRef: Any?, property: KProperty<*>, value: Int) {
        if (value in minValue..maxValue) {
            fieldData = value
        }
    }
}

fun main() {
    var smartDevice: SmartDevice
    var waySmartHome: SmartHome
    
    println("=========== Smart Devices Test ================")
    smartDevice = SmartTvDevice("Way Android TV", "Entertainment")
    smartDevice.turnOn()
    smartDevice.nextChannel()
    smartDevice.increaseSpeakerVolume()
    smartDevice.previousChannel()
    smartDevice.decreaseSpeakerVolume()
    smartDevice.printDeviceInfo()
    println()
   
    smartDevice = SmartLightDevice("Way Google Light", "Utility")
    smartDevice.turnOn()
    smartDevice.increaseBrightness()
    smartDevice.decreaseBrightness()
    smartDevice.printDeviceInfo()
    println()
    println("=========== Smart Home Test ================")
    waySmartHome = SmartHome(SmartTvDevice("Way SmartHome TV", "Entertainment"),
                             SmartLightDevice("Way SmartHome Light", "Utility"))
    waySmartHome.increaseTvVolume()
    waySmartHome.decreaseTvVolume()
    waySmartHome.changeTvChannelToNext() 
    waySmartHome.changeTvChannelToPrevious() 
    waySmartHome.increaseLightBrightness()
    waySmartHome.decreaseLightBrightness()
    println()
    waySmartHome.turnOnAllDevices() 
    println()
    waySmartHome.increaseTvVolume()
    waySmartHome.decreaseTvVolume()
    waySmartHome.changeTvChannelToNext() 
    waySmartHome.changeTvChannelToPrevious() 
    waySmartHome.increaseLightBrightness()
    waySmartHome.decreaseLightBrightness()
    println()
    waySmartHome.printAllDevicesInfo() 
    
}
